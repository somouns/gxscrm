股先生 CRM 团队开发规范

一、常量的定义和使用
    开发中使用的数据表状态值(status : 0 或 1) 需定义为常量，不允许在代码中直接使用 0 和 1 进行比对或判断。
        定义在路径 application\admin\constant 文件中，按照每个使用的数据表名称+Constant 定义。
    例如：
        <?php
            namespace app\admin\constant;

            class PageConstant
            {
                const PAGE_ENABLED = 1; //可编辑
                const PAGE_DISABLED = 0; //禁止编辑

            }
        ?>
    调用时：
        if (app\admin\constant\PageConstant::PAGE_ENABLED == $_REQUEST['status']) {
            echo 'ok';
        }


二、代码逻辑书写规范
    1、所有数据库操作的逻辑，需要写到model中，例如：app\admin\model\xxx.php中。
    2、controller 中不应出现对数据库的操作代码。
    3、禁止在for 或者 foreach 中逐条查询数据库。这种情况应该先将需要用到的查询结果 一次性从数据库查询出来，组装成数组。然后进行匹配。
    4、更新多张表的数据时，需要使用到事务，谨慎使用垮库事务。
    5、在写代码时，要做数据接收校验。对处理的数据都需要使用 try{...}catch(Exception $e){...} 来捕获异常。
    6、★每个功能模块的代码，尽量拆成独立的方法或函数。每个方法或者函数的代码不能过长，如果过长，需要考虑拆分方法或函数。
    7、★强烈要求捕获每个可能产生的异常并做处理。

三、关于连表和分页查询
    1、推荐使用单表查询得到每个字段的结果集，将结果集放到另一张表中用 in 查询(in 的字段需要建立索引)。
    2、尽量不要使用连表查询，如果非得要使用连表查询，关联查询的数据表不能超过2~3张，如果关联表超过此限制，
       需要想其他办法，改造代码的查询方式，提升查询效率。
    3、使用join连表查询，on 后的字段必须建立索引，否则影响查询效率。
    4、对单张表的查询分页，尽量使用 延迟关联，因为limit 在查询大量数据分页靠后时，有性能问题。
        limit N,M 查询问题：
            MySQL 执行此类sql时需要先扫描到N行，然后再去取 M行。对于此类大数据量的排序操作，取前面少数几行数据会很快，
            但是越靠后，sql的性能就会越差，因为N越大，MySQL 需要扫描不需要的数据然后再丢掉，这样耗费大量的时间。
            （limit的操作是在从索引表根据id找到行记录后进行limit的，有大量的数据被扫描后，丢弃了。
            延迟关联的写法，丢弃的是覆盖索引中的列，因为extra是using index，扫描索引表快，列少，因此效率高些）

        延迟关联原理：通过使用覆盖索引查询返回需要的主键,再根据主键关联原表获得需要的数据
        例：
        SELECT a.* FROM relation a, (select id from relation where biz_type ='0' ORDER BY id asc LIMIT 149420 ,20 ) b where a.id=b.id


三、类的定义和命名
    1、类的文件名均以命名空间定义，并且命名空间的路径和类库文件所在路径一致。
    2、类文件采用驼峰法命名（首字母大写），其它文件采用小写+下划线命名。
    3、类名和类文件名保持一致，统一采用驼峰法命名（首字母大写）。

四、函数和类、属性命名
    1、类的命名采用驼峰法（首字母大写），例如 User、UserType，默认不需要添加后缀，例如UserController应该直接命名为User。
    2、函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 get_client_ip。
    3、方法的命名使用驼峰法（首字母小写），例如 getUserName。
    4、属性的命名使用驼峰法（首字母小写），例如 tableName、instance。
    5、以双下划线“__”打头的函数或方法作为魔术方法，例如 __call 和 __autoload。

五、数据表和字段
    1、数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 think_user 表和 user_name字段，不建议使用驼峰和中文作为数据表字段命名。


